import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Message, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, CallbackContext, MessageHandler, filters
from config import TOKEN
from handlers.faq_handler import handle_faq
from handlers.button_1 import handle_button_1
from users_manager import load_users, save_users
from datetime import datetime
from handlers.random_media import handle_random_art, handle_buttons
from handlers.button_8 import handle_button_8
from handlers.button_7 import handle_button_coder
from admin_notifications import notify_admins_on_new_user

# –ö–Ω–æ–ø–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é (8 –∫–Ω–æ–ø–æ–∫)
def get_main_buttons() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton("Profile", callback_data='button_1')],
        [InlineKeyboardButton("Offer content", callback_data='button_2'),
         InlineKeyboardButton("Admin", url="https://t.me/kevinmitni")],
        [InlineKeyboardButton("FAQ", callback_data='button_4'),
         InlineKeyboardButton("Our chats", callback_data='button_5')],
        [InlineKeyboardButton("How it works", callback_data='button_6'),
         InlineKeyboardButton("Coder", callback_data='button_7')],
        [InlineKeyboardButton("Bot Statistic", callback_data='button_8')]
    ]
    return InlineKeyboardMarkup(keyboard)


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext) -> None:
    users_data = load_users()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö - –¥–æ–±–∞–≤–ª—è–µ–º
    user_id = update.message.from_user.id
    if user_id not in users_data:
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞—Ç—É –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç
        users_data[user_id] = {
            'registration_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }
        save_users(users_data)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–±–∞–≤–∏–ª–∏

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏
    sticker_file_id = 'CAACAgIAAxkBAAEBIhxnyZ5to1Q3ZKhfU7WBJDt0yFaSMQAC0x4AAqpBIUiHxavpLp-YXTYE'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π file_id —Å—Ç–∏–∫–µ—Ä–∞
    keyboard = [
        [KeyboardButton("Random Art"), KeyboardButton("Random Video")],  # Random Art –∏ Random Video –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
        [KeyboardButton("Random GIF")]  # Random GIF –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –∏ —Ç–µ–∫—Å—Ç —Å –æ–±—ã—á–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    await update.message.reply_sticker(sticker_file_id, reply_markup=reply_markup)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
    await update.message.reply_text(
        '<b>Good choice! Welcome to this wonderful world! Just logged into the bot and missed everything that was thrown? Write /syncmedia and enjoy.</b>',
        reply_markup=get_main_buttons(),
        parse_mode="HTML"  # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É HTML
    )
    await notify_admins_on_new_user(update, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    data = query.data

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users_data = load_users()

    if data == 'start_button':
        if isinstance(query.message, Message):
            user = query.from_user
            first_name = user.first_name if user.first_name else "Not set"

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∂–∏—Ä–Ω—ã–º –∏–º–µ–Ω–µ–º
            welcome_message = f"<b>{first_name}, welcome to this wonderful world! Just logged into the bot and missed everything that was thrown? Write /syncmedia and enjoy.</b>"

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_message_text –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
            await query.edit_message_text(
                welcome_message,
                parse_mode="HTML",  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
                reply_markup=get_main_buttons()
            )

    elif data == 'button_1':
        await handle_button_1(query, context, users_data)

    elif data == 'button_4':
        await handle_faq(query, context)

    elif data == 'button_8':
        await handle_button_8(query, context, users_data)

    elif data == 'button_7':
        await handle_button_coder(query, context)

    elif data == 'button_5':  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "Our chats"
        text = "<b>Our chats:</b>"

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —á–∞—Ç—ã –∏ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        keyboard = [
            [
                InlineKeyboardButton("dxdrmusic", url="https://t.me/dxdrmusic"),
                InlineKeyboardButton("elementras", url="https://t.me/elementras")
            ],
            [
                InlineKeyboardButton("üîô Back", callback_data='start_button')  # –ö–Ω–æ–ø–∫–∞ Back
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_message_text –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        await query.edit_message_text(
            text,
            parse_mode="HTML",  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
            reply_markup=reply_markup
        )

    elif data == 'button_6':  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "How it works"
        text = (
            "<b>Every day, you will receive content (art, videos, etc.) in the bot's private messages. Also, if you just logged into the bot and skipped all the content, you can use the /syncmedia command. This will allow you to get all the content that was posted before you.</b>"
        )

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –°–ø–∞–º–±–ª–æ–∫–∞ –∏ –¥—Ä—É–≥–∏—Ö
        keyboard = [
            [InlineKeyboardButton("üîô Back", callback_data='start_button')]  # –ö–Ω–æ–ø–∫–∞ Back
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_message_text –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        await query.edit_message_text(
            text,
            parse_mode="HTML",  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
            reply_markup=reply_markup
        )

    elif data == 'button_2':  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "Offer content"
        # –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Offer content"
        text = (
            f"<b>Do you want to offer your content for publication? Feel free to write to me, I appreciate it! Spamblock? Click on the Spamblock button and I'll write to you myself.</b>"
        )
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –°–ø–∞–º–±–ª–æ–∫–∞ –∏ –¥—Ä—É–≥–∏—Ö (Spamblock –∏ Admin –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É)
        keyboard = [
            [
                InlineKeyboardButton("Spamblock", callback_data='spamblock'),
                InlineKeyboardButton("Admin", url="https://t.me/kevinmitni")
            ],
            [InlineKeyboardButton("üîô Back", callback_data='start_button')]  # –ö–Ω–æ–ø–∫–∞ Back –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_message_text –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        await query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode="HTML"  # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É HTML
        )

    elif data == 'button_5':
        await handle_button_1(query, context, users_data)

    elif data.startswith('button_'):
        number = data.split('_')[1]

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if isinstance(query.message, Message):
            try:
                await query.message.delete()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")

        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–µ–∑ –¥–æ–ø.
        keyboard = [[InlineKeyboardButton("üîô Back", callback_data='start_button')]]

        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º edit_message_text
        await query.edit_message_text(
            text=f"You selected Button {number}",
            reply_markup=reply_markup
        )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø.
    elif data.startswith('extra1_') or data.startswith('extra2_'):
        extra_info = data.split('_')
        await context.bot.send_message(
            chat_id=query.from_user.id,
            text=f"You pressed {extra_info[0].upper()} from button {extra_info[1]}"
        )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ Spamblock
    elif data == 'spamblock':
        await context.bot.send_message(
            chat_id=query.from_user.id,
            text="I'll write to you myself soon! Stay tuned!"
        )

    elif data == 'random_art':  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ Random Art
        await handle_random_art(update, context)

def main() -> None:
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT, handle_buttons))

    application.run_polling()


if __name__ == '__main__':
    main()